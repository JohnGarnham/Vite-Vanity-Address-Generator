{"version":3,"sources":["findVanityAddress.js","App.js","reportWebVitals.js","index.js"],"names":["wallet","require","getRandomValues","isMatch","address","use_prefix","prefix","use_suffix","suffix","addr","substring","startsWith","toLowerCase","endsWith","generateNewRandomSeed","buffer","array","Uint8Array","map","x","toString","padStart","join","isHexString","str","test","VanityAddressForm","props","state","search","iterations","result","output","event","this","target","value","console","log","JSON","stringify","setState","matchLabel","document","getElementById","innerHTML","preventDefault","count","webWorker","Worker","type","postMessage","onmessage","e","labelStr","data","onerror","addEventListener","matches","Array","i","seed","keyPair","deriveKeyPairByIndex","createAddressByPrivateKey","privateKey","newMatch","push","searchAddresses","length","match","publicKey","originalAddress","alert","className","id","checked","onChange","handlePrefixCheckboxChanged","bind","name","handlePrefixChanged","handleSuffixCheckboxChanged","handleSuffixChanged","handleIterationsChanged","onClick","generateAddresses","reset","readOnly","href","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.aae19645.chunk.js","sourcesContent":["const {wallet} = require('@vite/vitejs');\r\n\r\nvar getRandomValues = require('get-random-values');\r\n\r\n// Returns true if address matches our criteria\r\nfunction isMatch(address, use_prefix, prefix, use_suffix, suffix) {\r\n  // Chop off vite_\r\n  const addr = address.substring(5);\r\n  // Check matching prefix \r\n  if(use_prefix) {\r\n    // Fail on null or empty string\r\n    if (prefix == null) return false;\r\n    // Fail on mismatch\r\n    if (! addr.startsWith(prefix.toLowerCase())) return false;\r\n  }\r\n  // Check matching suffix\r\n  if(use_suffix) {\r\n    // Fail on null or empty string\r\n    if (suffix == null) return false;\r\n    // Fail on mismatch\r\n    if (! addr.endsWith(suffix.toLowerCase())) return false;\r\n  }\r\n  // If you reached here, you've won! :)\r\n  return true;\r\n}\r\n\r\n// Generate count Vite address and search for prefix or suffix \r\n// Return an array of matching MatchObj objects\r\nexport function searchAddresses(use_prefix, prefix, use_suffix, suffix, count) {\r\n    // Debug log\r\n    //console.log(\"In searchAddresses(${use_prefix},${prefix},${use_suffix},${suffix},${count})\");\r\n    // Create matches array\r\n    var matches = new Array();\r\n    // Iterate thru count addresses\r\n    for(var i = 0; i < count; i++) {\r\n      // Generate new random seed\r\n      const seed = generateNewRandomSeed();\r\n      // Generate an address from this seed\r\n      let index = 0;\r\n      var keyPair = wallet.deriveKeyPairByIndex(seed, index);\r\n      var address = wallet.createAddressByPrivateKey(keyPair.privateKey);\r\n      // Check if generated address matches criteria\r\n      if (isMatch(address.address, use_prefix, prefix, use_suffix, suffix)) {\r\n        // Create new match object\r\n        const newMatch = ({\r\n          address: address,\r\n          seed: seed\r\n        });\r\n        // Push onto matches array\r\n        matches.push(newMatch);\r\n        // Debug matching address\r\n        //console.log(\"New address match found: \", newMatch);\r\n      }\r\n    }\r\n    // Return matches\r\n    return matches;\r\n}\r\n\r\n// Generate new random seed\r\nfunction generateNewRandomSeed() {\r\n    // Generate random 32 byte seed\r\n    var array = new Uint8Array(32);\r\n    getRandomValues(array);\r\n    // Generate randomized hex string for seed\r\n    return buf2hex(array.buffer);\r\n}\r\n\r\n// Returns whether or not str is valid hex string\r\nexport function isHexString(str) {\r\n  var re = /^([0-9A-Fa-f])*$/;\r\n  return (re.test(str));\r\n}\r\n\r\n// Convert buffer to hex string\r\nfunction buf2hex(buffer) { \r\n  return [...new Uint8Array(buffer)]\r\n      .map(x => x.toString(16).padStart(2, '0'))  // Convert to hex, pad with 0\r\n      .join('');\r\n}","import './App.css';\r\n\r\nimport React from 'react' \r\nimport {searchAddresses, isHexString, MatchObj} from './findVanityAddress'\r\n\r\nconst DEFAULT_ITERATIONS = 500;\r\n\r\nexport default class VanityAddressForm extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    // Define state\r\n    this.state = {\r\n        // Search parameters\r\n        search: {      \r\n          prefix: '',\r\n          use_prefix: true,\r\n          suffix: '',\r\n          use_suffix: false,\r\n          iterations: DEFAULT_ITERATIONS\r\n        },\r\n        result: {\r\n          output: ''\r\n        }\r\n      };\r\n  }\r\n\r\n  // Text in prefix textfield modified\r\n  handlePrefixChanged(event) {\r\n    var search = this.state.search;\r\n    search.prefix  = event.target.value;\r\n    console.log(JSON.stringify(search));\r\n    this.setState({ search: search });\r\n  }\r\n\r\n  // Text in suffix textfield modified\r\n  handleSuffixChanged(event) {\r\n    var search = this.state.search;\r\n    search.suffix  = event.target.value;\r\n    console.log(JSON.stringify(search));\r\n    this.setState({ search: search });\r\n  }\r\n\r\n  // Text in iterations textfield modified\r\n  handleIterationsChanged(event) {\r\n    var search = this.state.search;\r\n    search.iterations  = event.target.value;\r\n    console.log(JSON.stringify(search));\r\n    this.setState({ search: search });\r\n  }\r\n\r\n  // Handle check box change\r\n  handlePrefixCheckboxChanged(event) {\r\n    var search = this.state.search;\r\n    // Toggle use_prefix value\r\n    search.use_prefix = ! search.use_prefix; \r\n    console.log(JSON.stringify(search));\r\n    this.setState({ search: search });\r\n  }\r\n\r\n  handleSuffixCheckboxChanged(event) {\r\n    var search = this.state.search;\r\n    // Toggle use_suffix value\r\n    search.use_suffix = ! search.use_suffix; \r\n    console.log(JSON.stringify(search));\r\n    this.setState({ search: search });\r\n  }\r\n\r\n  // Reset all values\r\n  reset(event) {\r\n    // Set all search terms to their defaults\r\n    var search = this.state.search;\r\n    search.prefix = \"\";\r\n    search.suffix = \"\";\r\n    search.use_prefix = false;\r\n    search.use_suffix = false;\r\n    search.iterations = DEFAULT_ITERATIONS;\r\n    this.setState({ search: search });\r\n    // Clear matching count label\r\n    let matchLabel = document.getElementById(\"matches-found-label\");\r\n    if(matchLabel != null) {\r\n      matchLabel.innerHTML = \"\";\r\n    }\r\n    // Clear output\r\n    var result = this.state.result;\r\n    result.output= \"\";\r\n    this.setState({ result: result });\r\n  }\r\n\r\n  // Generate addresses\r\n  generateAddresses(event) {\r\n\r\n    event.preventDefault();\r\n\r\n    // Grab search state. Log for debug\r\n    var search = this.state.search;\r\n    console.log(JSON.stringify(search));\r\n\r\n    // Grab search parameters\r\n    let prefix = this.state.search.prefix;\r\n    let use_prefix = this.state.search.use_prefix;\r\n    let suffix = this.state.search.suffix;\r\n    let use_suffix = this.state.search.use_suffix;\r\n    let count = this.state.search.iterations;\r\n\r\n    // Make sure suffix is valid hex string\r\n    if(! isHexString(search.prefix)) {\r\n      alert(\"Prefix must be a hex string. Valid characters are 0-9 and A-F.\");\r\n      return;\r\n    }\r\n    // Make sure suffix is valid hex string\r\n    if(! isHexString(search.suffix)) {\r\n      alert(\"Suffix must be a hex string. Valid characters are 0-9 and A-F.\");\r\n      return;\r\n    }\r\n\r\n    // Create a web worker\r\n    const webWorker = new Worker('worker.js', {\r\n      type: 'module'\r\n    });\r\n  \r\n    // Pass in search parameters to webworker\r\n    console.log(\"POSTING MSG TO WEBWORKER\");\r\n    webWorker.postMessage( { use_prefix: use_prefix, prefix: prefix, use_suffix: use_suffix, suffix:suffix, count:count });\r\n    webWorker.onmessage = (e) => {\r\n      const labelStr = e.data;\r\n      console.log(labelStr);\r\n    };\r\n    webWorker.onerror = (e) => {\r\n      console.log(e);\r\n    };\r\n    webWorker.addEventListener('message', function(e) {\r\n      console.log('Worker said: ', e.data);\r\n    }, false);\r\n    // Call search addresses function\r\n    let matches = searchAddresses(use_prefix,prefix,use_suffix,suffix,count);\r\n\r\n    let output = \"\";\r\n\r\n    // Set matches found label\r\n    let labelStr = \"\";\r\n    if(matches.length == 0) {\r\n      labelStr = output = \"No addresses found\";\r\n    } else {\r\n      labelStr = matches.length + \" matching addresses found\";\r\n    }\r\n    console.log(labelStr);\r\n    let matchLabel = document.getElementById(\"matches-found-label\");\r\n    if(matchLabel != null) {\r\n      matchLabel.innerHTML = labelStr;\r\n    }\r\n      \r\n    // Set output textfield\r\n    let i = 0;\r\n    for(i = 0; i < matches.length; i++) {\r\n      let match = matches[i];\r\n      output += \"Match #\" + (i + 1) + \"\\n\" +\r\n          \"Address: \" + match.address.address + \"\\n\" +\r\n          \"Seed: \" + match.seed + \"\\n\" +\r\n          \"Private Key: \" + match.address.privateKey + \"\\n\" +\r\n          \"Public Key: \" + match.address.publicKey + \"\\n\" +\r\n          \"Original Address: \" + match.address.originalAddress + \"\\n\\n\";\r\n    }\r\n\r\n    // Update output state\r\n    var result = this.state.result;\r\n    result.output = output;\r\n    this.setState({ result: result });\r\n  }\r\n\r\n  render() {\r\n  return (\r\n      <div className=\"root\">\r\n        <div className=\"header\">\r\n          <h2>Vite Vanity Address Creator</h2>\r\n        </div>\r\n        <div className=\"input-section\">\r\n          <div className=\"input-text-row\"> \r\n            <input type=\"checkbox\" className=\"input-checkbox\" id=\"usePrefix\" value={this.state.search.use_prefix} \r\n              checked={this.state.search.use_prefix} onChange={this.handlePrefixCheckboxChanged.bind(this)}/>\r\n            <label className=\"input-label\">Prefix:</label>\r\n            <input type=\"text\" className=\"text-input\" id=\"prefix\" name=\"prefix\" \r\n              value={this.state.search.prefix} onChange={this.handlePrefixChanged.bind(this)} />\r\n          </div>\r\n          <div className=\"input-text-row\">\r\n            <input type=\"checkbox\" className=\"input-checkbox\" id=\"useSuffix\" value={this.state.search.use_suffix} \r\n              checked={this.state.search.use_suffix} onChange={this.handleSuffixCheckboxChanged.bind(this)}/>\r\n            <label className=\"input-label\">Suffix:</label>\r\n            <input type=\"text\" className=\"text-input\" id=\"suffix\" name=\"suffix\" \r\n                value={this.state.search.suffix} onChange={this.handleSuffixChanged.bind(this)} />\r\n          </div>\r\n          <div className=\"input-text-row\">\r\n            <label className=\"input-label\">Iterations:</label>\r\n            <input type=\"text\" className=\"text-input-iterations\" id=\"iterations\" name=\"iterations\" \r\n              value={this.state.search.iterations} onChange={this.handleIterationsChanged.bind(this)} />\r\n            <label className=\"matches-label\" name=\"matches-found-label\" id=\"matches-found-label\"></label>\r\n          </div>\r\n        </div>\r\n        <div className=\"input-button-row\">\r\n          <button type=\"button\" className=\"input-button\" name=\"Generate\" onClick={this.generateAddresses.bind(this)}>\r\n            Generate\r\n          </button>\r\n          <button type=\"button\" className=\"input-button\" name=\"Reset\" onClick={this.reset.bind(this)}>\r\n            Reset\r\n          </button>\r\n        </div>\r\n        <div className=\"output-row\">\r\n          <textarea className=\"textarea-output\" id=\"output\" name=\"output\" \r\n            value={this.state.result.output} readOnly />\r\n        </div>\r\n        <footer>\r\n          Email: <a className=\"footer-link\" href=\"mailto:john.e.garnham@gmail.com\">john.e.garnham@gmail.com</a> \r\n          Twitter: <a className=\"footer-link\"  href=\"https://twitter.com/ViNoDevErik\">ViNoDevErik</a>\r\n          GITHUB: <a className=\"footer-link\"  href=\"https://github.com/JohnGarnham/Vite-Vanity-Address-Generator\">\r\n            https://github.com/JohnGarnham/Vite-Vanity-Address-Generator\r\n            </a>\r\n        </footer>\r\n      </div>\r\n    );\r\n  }\r\n\r\n}\r\n\r\n\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}